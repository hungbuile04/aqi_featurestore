import os
import datetime
import asyncio
import threading
import smtplib
from email.mime.text import MIMEText
from zoneinfo import ZoneInfo
from feast import FeatureStore
from pytz import timezone
import pandas as pd
import joblib

import google.auth
from google.adk.agents import Agent
import uvicorn


# --- C·∫§U H√åNH ---
os.environ.setdefault("GOOGLE_CLOUD_PROJECT", "iron-envelope-455716-g8")
os.environ.setdefault("GOOGLE_CLOUD_LOCATION", "us-east1")
os.environ.setdefault("GOOGLE_GENAI_USE_VERTEXAI", "True")

# Gmail g·ª≠i email c·∫£nh b√°o
EMAIL_SENDER = "builehunghuy2004@gmail.com"
EMAIL_PASSWORD = "dfrwngpmhldqmwyd"  # D√πng App Password t·ª´ Gmail
EMAIL_RECIPIENTS = ["overleaf.editor1@gmail.com"]

# Map entity_id cho t·ª´ng th√†nh ph·ªë
CITY_COORD_MAP = {
    "h√† n·ªôi": "21.0_105.75",
    "h·∫£i ph√≤ng": "20.75_106.75",
    "th√°i b√¨nh": "20.5_106.25",
}

# Map city name -> model file
CITY_MODEL_MAP = {
    "h√† n·ªôi": "/Users/buihung/VT/project1/model/aqi_model_hn.pkl",
    "h·∫£i ph√≤ng": "/Users/buihung/VT/project1/model/aqi_model_hp.pkl",
    "th√°i b√¨nh": "/Users/buihung/VT/project1/model/aqi_model_tb.pkl",
}

# --- TOOL: Ph√¢n t√≠ch ng√†y t·ª´ truy v·∫•n ---
def parse_date_from_query(query: str) -> datetime.datetime | None:
    try:
        for part in query.split():
            if "/" in part:
                day, month, *year = map(int, part.split("/"))
                year = year[0] if year else datetime.datetime.now().year
                return datetime.datetime(year, month, day, tzinfo=ZoneInfo("Asia/Ho_Chi_Minh"))
    except Exception:
        return None
    return None

# H√†m ch√≠nh d·ª± ƒëo√°n
def get_aqi_from_city_name(query: str) -> str:
    city_name = next((city for city in CITY_COORD_MAP if city in query.lower()), None)
    if not city_name:
        return f"Xin l·ªói, t√¥i kh√¥ng c√≥ d·ªØ li·ªáu cho th√†nh ph·ªë ƒë∆∞·ª£c y√™u c·∫ßu trong: {query}."

    entity_id = CITY_COORD_MAP[city_name]
    model_path = CITY_MODEL_MAP[city_name]
    target_date = parse_date_from_query(query)
    is_historical = target_date is not None

    try:
        store = FeatureStore(repo_path="/Users/buihung/VT/project1/feast")
        features = ["aqi_info_v1:aqi", "aqi_info_v1:hour", "aqi_info_v1:day", "aqi_info_v1:dayOfWeek"]

        if is_historical:
            return "‚ö†Ô∏è Truy v·∫•n d·ªØ li·ªáu l·ªãch s·ª≠ ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£ qua Redis. H√£y d√πng BigQuery ho·∫∑c offline store."

        # L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i t·ª´ Redis
        feature_data = store.get_online_features(
            features=features,
            entity_rows=[{"entity_id": entity_id}]
        ).to_df()

        if feature_data.empty or pd.isna(feature_data["aqi"].iloc[0]):
            return f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu AQI cho {city_name.title()} h√¥m nay. C√≥ th·ªÉ Redis ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t."

        # L·∫•y th√¥ng tin hi·ªán t·∫°i
        current_aqi = feature_data["aqi"].iloc[0]
        hour = int(feature_data["hour"].iloc[0])
        day = int(feature_data["day"].iloc[0])
        dow = int(feature_data["dayOfWeek"].iloc[0])

        # T√≠nh gi·ªù ti·∫øp theo
        next_hour = (hour + 1) % 24
        next_day = day + 1 if next_hour == 0 else day
        next_dow = (dow % 7) + 1 if next_hour == 0 else dow

        # Load ƒë√∫ng model theo t·ª´ng th√†nh ph·ªë
        model_loaded, metadata_loaded = joblib.load(model_path)
        input_df = pd.DataFrame([{
            "hour": next_hour,
            "day": next_day,
            "dayOfWeek": next_dow,
            "last_hour_aqi": current_aqi
        }])

        predicted_aqi = model_loaded.predict(input_df)[0]

        def level(aqi):
            if aqi <= 50: return "T·ªët"
            elif aqi <= 100: return "Trung b√¨nh"
            elif aqi <= 150: return "Kh√¥ng t·ªët cho nh√≥m nh·∫°y c·∫£m"
            else: return "√î nhi·ªÖm, n√™n h·∫°n ch·∫ø ra ngo√†i"

        return (
            f"AQI t·∫°i {city_name.title()} hi·ªán t·∫°i l√† {current_aqi:.2f} ‚Äì {level(current_aqi)}.\n"
            f"‚úÖ D·ª± ƒëo√°n AQI gi·ªù ti·∫øp theo (h{next_hour:02d}): {predicted_aqi:.2f} ‚Äì {level(predicted_aqi)}"
        )

    except Exception as e:
        return f"‚ùå Kh√¥ng th·ªÉ l·∫•y ho·∫∑c d·ª± ƒëo√°n d·ªØ li·ªáu AQI cho {city_name.title()}. L·ªói: {str(e)}"
    
# --- TOOL: L·∫•y ng√†y hi·ªán t·∫°i ---
def get_current_date(query: str) -> str:
    now = datetime.datetime.now(ZoneInfo("Asia/Ho_Chi_Minh"))
    return f"H√¥m nay l√† {now.strftime('%Y-%m-%d %H:%M:%S %Z')}"

# --- G·ª¨I EMAIL ---
def send_email(to_email: str, subject: str, body: str):
    msg = MIMEText(body)
    msg["Subject"] = subject
    msg["From"] = EMAIL_SENDER
    msg["To"] = to_email
    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(EMAIL_SENDER, EMAIL_PASSWORD)
            server.send_message(msg)
        print(f"üìß Email sent to {to_email}")
    except Exception as e:
        print(f"‚ùå Failed to send email: {e}")

# --- KI·ªÇM TRA AQI ƒê·ªäNH K·ª≤ ---
async def hourly_aqi_check():
    while True:
        print("üîÑ Ki·ªÉm tra AQI ƒë·ªãnh k·ª≥...")
        result = get_aqi_from_city_name(f"aqi cho h√† n·ªôi, kh√¥ng c·∫ßn ƒë∆∞a ra d·ª± b√°o")
        if any(w in result.lower() for w in ["√¥ nhi·ªÖm", "kh√¥ng t·ªët"]):
            subject = f"[C·∫¢NH B√ÅO AQI] Kh√¥ng kh√≠ x·∫•u t·∫°i h√† n·ªôi"
            for email in EMAIL_RECIPIENTS:
                send_email(email, subject, result)
        await asyncio.sleep(3600)  # Ch·ªù 1 ti·∫øng

# --- T·∫†O AGENT ---
root_agent = Agent(
    name="root_agent",
    model="gemini-2.0-flash",
    instruction=(
        "B·∫°n l√† tr·ª£ l√Ω AI h·ªØu √≠ch, chuy√™n cung c·∫•p th√¥ng tin AQI cho c√°c th√†nh ph·ªë t·∫°i Vi·ªát Nam. "
        "B·∫°n c√≥ th·ªÉ cung c·∫•p d·ªØ li·ªáu AQI hi·ªán t·∫°i ho·∫∑c qu√° kh·ª© n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu "
        "(v√≠ d·ª•: 'AQI cho H√† N·ªôi ng√†y 24/5'). "
        "B·∫°n c≈©ng c√≥ th·ªÉ tr·∫£ l·ªùi ng√†y hi·ªán t·∫°i n·∫øu ƒë∆∞·ª£c h·ªèi. "
        "N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c y√™u c·∫ßu kh√¥ng r√µ, h√£y gi·∫£i th√≠ch r√µ r√†ng v√† l·ªãch s·ª±."
    ),
    tools=[get_aqi_from_city_name, get_current_date],
)

# --- CH·∫†Y AGENT + V√íNG L·∫∂P ƒê·ªäNH K·ª≤ ---
if __name__ == "__main__":
    def run_scheduler():
        asyncio.run(hourly_aqi_check())

    threading.Thread(target=run_scheduler, daemon=True).start()
    uvicorn.run("agent:root_agent", host="127.0.0.1", port=8001)